{"version":3,"sources":["../../src/renderers/canvas.js"],"names":["renderer","canvas","encodings","options","getContext","Error","ctx","prepareCanvas","i","length","encodingOptions","drawCanvasBarcode","drawCanvasText","moveCanvasDrawing","restore","save","totalWidth","maxHeight","width","marginLeft","marginRight","height","clearRect","background","fillStyle","fillRect","translate","encoding","binary","data","yFrom","textPosition","marginTop","fontSize","textMargin","lineColor","b","x","barcodePadding","font","fontOptions","displayValue","y","textAlign","fillText","text"],"mappings":"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","sourcesContent":["import { calculateEncodingAttributes, getTotalWidthOfEncodings, getMaximumHeightOfEncodings } from './shared.js';\n\nfunction renderer(canvas, encodings, options) {\n\t// Abort if the browser does not support HTML5 canvas\n\tif (!canvas.getContext) {\n\t\tthrow new Error('The browser does not support canvas');\n\t}\n\n\tconst ctx = canvas.getContext('2d');\n\n\tprepareCanvas();\n\tfor (let i = 0; i < encodings.length; i++) {\n\t\tvar encodingOptions = { ...options, ...encodings[i].options };\n\n\t\tdrawCanvasBarcode(encodingOptions, encodings[i]);\n\t\tdrawCanvasText(encodingOptions, encodings[i]);\n\n\t\tmoveCanvasDrawing(encodings[i]);\n\t}\n\tctx.restore();\n\n\tfunction prepareCanvas() {\n\t\tctx.save();\n\n\t\tcalculateEncodingAttributes(encodings, options, ctx);\n\t\tvar totalWidth = getTotalWidthOfEncodings(encodings);\n\t\tvar maxHeight = getMaximumHeightOfEncodings(encodings);\n\n\t\tcanvas.width = totalWidth + options.marginLeft + options.marginRight;\n\n\t\tcanvas.height = maxHeight;\n\n\t\t// Paint the canvas\n\t\tctx.clearRect(0, 0, canvas.width, canvas.height);\n\t\tif (options.background) {\n\t\t\tctx.fillStyle = options.background;\n\t\t\tctx.fillRect(0, 0, canvas.width, canvas.height);\n\t\t}\n\n\t\tctx.translate(options.marginLeft, 0);\n\t}\n\n\tfunction drawCanvasBarcode(options, encoding) {\n\t\tvar binary = encoding.data;\n\n\t\t// Creates the barcode out of the encoded binary\n\t\tvar yFrom;\n\t\tif (options.textPosition == 'top') {\n\t\t\tyFrom = options.marginTop + options.fontSize + options.textMargin;\n\t\t} else {\n\t\t\tyFrom = options.marginTop;\n\t\t}\n\n\t\tctx.fillStyle = options.lineColor;\n\n\t\tfor (var b = 0; b < binary.length; b++) {\n\t\t\tvar x = b * options.width + encoding.barcodePadding;\n\n\t\t\tif (binary[b] === '1') {\n\t\t\t\tctx.fillRect(x, yFrom, options.width, options.height);\n\t\t\t} else if (binary[b]) {\n\t\t\t\tctx.fillRect(x, yFrom, options.width, options.height * binary[b]);\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction drawCanvasText(options, encoding) {\n\t\tvar font = options.fontOptions + ' ' + options.fontSize + 'px ' + options.font;\n\n\t\t// Draw the text if displayValue is set\n\t\tif (options.displayValue) {\n\t\t\tvar x, y;\n\n\t\t\tif (options.textPosition == 'top') {\n\t\t\t\ty = options.marginTop + options.fontSize - options.textMargin;\n\t\t\t} else {\n\t\t\t\ty = options.height + options.textMargin + options.marginTop + options.fontSize;\n\t\t\t}\n\n\t\t\tctx.font = font;\n\n\t\t\t// Draw the text in the correct X depending on the textAlign option\n\t\t\tif (options.textAlign == 'left' || encoding.barcodePadding > 0) {\n\t\t\t\tx = 0;\n\t\t\t\tctx.textAlign = 'left';\n\t\t\t} else if (options.textAlign == 'right') {\n\t\t\t\tx = encoding.width - 1;\n\t\t\t\tctx.textAlign = 'right';\n\t\t\t}\n\t\t\t// In all other cases, center the text\n\t\t\telse {\n\t\t\t\tx = encoding.width / 2;\n\t\t\t\tctx.textAlign = 'center';\n\t\t\t}\n\n\t\t\tctx.fillText(encoding.text, x, y);\n\t\t}\n\t}\n\n\tfunction moveCanvasDrawing(encoding) {\n\t\tctx.translate(encoding.width, 0);\n\t}\n}\n\nexport default renderer;\n"],"file":"canvas.js"}