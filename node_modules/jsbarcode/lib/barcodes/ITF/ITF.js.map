{"version":3,"sources":["../../../src/barcodes/ITF/ITF.js"],"names":["ITF","data","search","encoded","match","map","pair","encodePair","join","START_BIN","END_BIN","text","second","BINARIES","split","first","idx","Barcode"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;;;;;;;;;;;;;;;IAEMA,G;;;;;;;;;;;;;4BACG;AACP,aAAO,KAAKC,IAAL,CAAUC,MAAV,CAAiB,eAAjB,MAAsC,CAAC,CAA9C;AACA;;;6BAEQ;AAAA;;AACR;AACA,UAAMC,OAAO,GAAG,KAAKF,IAAL,CACdG,KADc,CACR,OADQ,EAEdC,GAFc,CAEV,UAAAC,IAAI;AAAA,eAAI,KAAI,CAACC,UAAL,CAAgBD,IAAhB,CAAJ;AAAA,OAFM,EAGdE,IAHc,CAGT,EAHS,CAAhB;AAKA,aAAO;AACNP,QAAAA,IAAI,EAAEQ,uBAAYN,OAAZ,GAAsBO,kBADtB;AAENC,QAAAA,IAAI,EAAE,KAAKA;AAFL,OAAP;AAIA,K,CAED;;;;+BACWL,I,EAAM;AAChB,UAAMM,MAAM,GAAGC,oBAASP,IAAI,CAAC,CAAD,CAAb,CAAf;AAEA,aAAOO,oBAASP,IAAI,CAAC,CAAD,CAAb,EACLQ,KADK,CACC,EADD,EAELT,GAFK,CAED,UAACU,KAAD,EAAQC,GAAR;AAAA,eAAgB,CAACD,KAAK,KAAK,GAAV,GAAgB,KAAhB,GAAwB,GAAzB,KAAiCH,MAAM,CAACI,GAAD,CAAN,KAAgB,GAAhB,GAAsB,KAAtB,GAA8B,GAA/D,CAAhB;AAAA,OAFC,EAGLR,IAHK,CAGA,EAHA,CAAP;AAIA;;;;EA1BgBS,iB;;eA6BHjB,G","sourcesContent":["import { START_BIN, END_BIN, BINARIES } from './constants';\nimport Barcode from '../Barcode';\n\nclass ITF extends Barcode {\n\tvalid() {\n\t\treturn this.data.search(/^([0-9]{2})+$/) !== -1;\n\t}\n\n\tencode() {\n\t\t// Calculate all the digit pairs\n\t\tconst encoded = this.data\n\t\t\t.match(/.{2}/g)\n\t\t\t.map(pair => this.encodePair(pair))\n\t\t\t.join('');\n\n\t\treturn {\n\t\t\tdata: START_BIN + encoded + END_BIN,\n\t\t\ttext: this.text\n\t\t};\n\t}\n\n\t// Calculate the data of a number pair\n\tencodePair(pair) {\n\t\tconst second = BINARIES[pair[1]];\n\n\t\treturn BINARIES[pair[0]]\n\t\t\t.split('')\n\t\t\t.map((first, idx) => (first === '1' ? '111' : '1') + (second[idx] === '1' ? '000' : '0'))\n\t\t\t.join('');\n\t}\n}\n\nexport default ITF;\n"],"file":"ITF.js"}