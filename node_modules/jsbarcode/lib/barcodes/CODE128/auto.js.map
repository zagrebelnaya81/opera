{"version":3,"sources":["../../../src/barcodes/CODE128/auto.js"],"names":["matchSetALength","string","match","RegExp","A_CHARS","length","matchSetBLength","B_CHARS","matchSetC","C_CHARS","autoSelectFromAB","isA","ranges","untilC","String","fromCharCode","autoSelectFromC","substring","chars","cMatch","newString","cLength","C_START_CHAR","A_START_CHAR","B_START_CHAR","replace","char"],"mappings":"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","sourcesContent":["import { A_START_CHAR, B_START_CHAR, C_START_CHAR, A_CHARS, B_CHARS, C_CHARS } from './constants';\n\n// Match Set functions\nconst matchSetALength = string => string.match(new RegExp(`^${A_CHARS}*`))[0].length;\nconst matchSetBLength = string => string.match(new RegExp(`^${B_CHARS}*`))[0].length;\nconst matchSetC = string => string.match(new RegExp(`^${C_CHARS}*`))[0];\n\n// CODE128A or CODE128B\nfunction autoSelectFromAB(string, isA) {\n\tconst ranges = isA ? A_CHARS : B_CHARS;\n\tconst untilC = string.match(new RegExp(`^(${ranges}+?)(([0-9]{2}){2,})([^0-9]|$)`));\n\n\tif (untilC) {\n\t\treturn untilC[1] + String.fromCharCode(204) + autoSelectFromC(string.substring(untilC[1].length));\n\t}\n\n\tconst chars = string.match(new RegExp(`^${ranges}+`))[0];\n\n\tif (chars.length === string.length) {\n\t\treturn string;\n\t}\n\n\treturn chars + String.fromCharCode(isA ? 205 : 206) + autoSelectFromAB(string.substring(chars.length), !isA);\n}\n\n// CODE128C\nfunction autoSelectFromC(string) {\n\tconst cMatch = matchSetC(string);\n\tconst length = cMatch.length;\n\n\tif (length === string.length) {\n\t\treturn string;\n\t}\n\n\tstring = string.substring(length);\n\n\t// Select A/B depending on the longest match\n\tconst isA = matchSetALength(string) >= matchSetBLength(string);\n\treturn cMatch + String.fromCharCode(isA ? 206 : 205) + autoSelectFromAB(string, isA);\n}\n\n// Detect Code Set (A, B or C) and format the string\nexport default string => {\n\tlet newString;\n\tconst cLength = matchSetC(string).length;\n\n\t// Select 128C if the string start with enough digits\n\tif (cLength >= 2) {\n\t\tnewString = C_START_CHAR + autoSelectFromC(string);\n\t} else {\n\t\t// Select A/B depending on the longest match\n\t\tconst isA = matchSetALength(string) > matchSetBLength(string);\n\t\tnewString = (isA ? A_START_CHAR : B_START_CHAR) + autoSelectFromAB(string, isA);\n\t}\n\n\treturn newString.replace(\n\t\t/[\\xCD\\xCE]([^])[\\xCD\\xCE]/, // Any sequence between 205 and 206 characters\n\t\t(match, char) => String.fromCharCode(203) + char\n\t);\n};\n"],"file":"auto.js"}