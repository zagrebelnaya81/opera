{"version":3,"sources":["../src/index.js"],"names":["API","JsBarcode","element","text","options","api","document","querySelector","NoElementException","_encodings","_options","defaults","_element","push","encode","render","Encoder","encoder","valid","InvalidInputException","constructor","name","encoded","prototype","blank","size","zeroes","Array","join","data","barcode","_defaults","encodings","i","length","renderer"],"mappings":"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","sourcesContent":["// Help functions\r\nimport linearizeEncodings from './help/linearizeEncodings.js';\r\nimport fixOptions from './help/fixOptions.js';\r\n\r\n// Exceptions\r\nimport { InvalidInputException, NoElementException } from './exceptions/exceptions.js';\r\n\r\n// Default values\r\nimport defaults from './options/defaults.js';\r\n\r\n// The protype of the object returned from the JsBarcode() call\r\nconst API = function() {};\r\n\r\n// The first call of the library API\r\n// Will return an object with all barcodes calls and the data that is used\r\n// by the renderers\r\nconst JsBarcode = function(element, text, options) {\r\n\tvar api = new API();\r\n\r\n\tif (typeof element === 'string') {\r\n\t\telement = document.querySelector(element);\r\n\t}\r\n\r\n\tif (typeof element === 'undefined') {\r\n\t\tthrow new NoElementException('No element to render on was provided.');\r\n\t}\r\n\r\n\t// Variables that will be pased through the API calls\r\n\tapi._encodings = [];\r\n\tapi._options = { ...defaults, ...(options || {}) };\r\n\tapi._element = element;\r\n\r\n\t// If text is set, use the simple syntax (render the barcode directly)\r\n\tif (typeof text !== 'undefined') {\r\n\t\toptions = options || {};\r\n\r\n\t\tapi._encodings.push(encode(text, api._options));\r\n\t\tapi.options(options).render();\r\n\t}\r\n\r\n\treturn api;\r\n};\r\n\r\n// encode() handles the Encoder call and builds the binary string to be rendered\r\nfunction encode(text, options) {\r\n\t// Ensure that text is a string\r\n\ttext = '' + text;\r\n\r\n\tconst Encoder = options.encoder;\r\n\tconst encoder = new Encoder(text, options);\r\n\r\n\t// If the input is not valid for the encoder, throw error.\r\n\t// If the valid callback option is set, call it instead of throwing error\r\n\tif (!encoder.valid()) {\r\n\t\tthrow new InvalidInputException(encoder.constructor.name, text);\r\n\t}\r\n\r\n\t// Make a request for the binary data (and other infromation) that should be rendered\r\n\tconst encoded = encoder.encode();\r\n\r\n\treturn encoded;\r\n}\r\n\r\n// Sets global encoder options\r\n// Added to the api by the JsBarcode function\r\nAPI.prototype.options = function(options) {\r\n\tthis._options = { ...this._options, ...options };\r\n\treturn this;\r\n};\r\n\r\n// Will create a blank space (usually in between barcodes)\r\nAPI.prototype.blank = function(size) {\r\n\tconst zeroes = new Array(size + 1).join('0');\r\n\tthis._encodings.push({ data: zeroes });\r\n\treturn this;\r\n};\r\n\r\n// Will encode another barcode\r\nAPI.prototype.barcode = function(text, options) {\r\n\tthis._encodings.push(encode(text, { ...this._options, ...(options || {}) }));\r\n\treturn this;\r\n};\r\n\r\n// The render API call. Calls the real render function.\r\nAPI.prototype.render = function() {\r\n\trender(this._element, this._encodings, this._options);\r\n\r\n\treturn this;\r\n};\r\n\r\nAPI.prototype._defaults = defaults;\r\n\r\n// Prepares the encodings and calls the renderer\r\nfunction render(element, encodings, options) {\r\n\tencodings = linearizeEncodings(encodings);\r\n\r\n\tfor (let i = 0; i < encodings.length; i++) {\r\n\t\tencodings[i].options = { ...options, ...encodings[i].options };\r\n\t\tfixOptions(encodings[i].options);\r\n\t}\r\n\r\n\tfixOptions(options);\r\n\r\n\toptions.renderer(element, encodings, options);\r\n}\r\n\r\nexport default JsBarcode;\r\n"],"file":"index.js"}